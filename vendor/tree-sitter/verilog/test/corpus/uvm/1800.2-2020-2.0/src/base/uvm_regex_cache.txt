============================================
uvm/1800.2-2020-2.0/src/base/uvm_regex_cache
============================================

//
//------------------------------------------------------------------------------
// Copyright 2022 Marvell International Ltd.
// Copyright 2021 NVIDIA Corporation
//   All Rights Reserved Worldwide
//
//   Licensed under the Apache License, Version 2.0 (the
//   "License"); you may not use this file except in
//   compliance with the License.  You may obtain a copy of
//   the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in
//   writing, software distributed under the License is
//   distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
//   CONDITIONS OF ANY KIND, either express or implied.  See
//   the License for the specific language governing
//   permissions and limitations under the License.
//------------------------------------------------------------------------------

`ifndef UVM_REGEX_CACHE_SVH
 `define UVM_REGEX_CACHE_SVH

//------------------------------------------------------------------------------
//
// CLASS -- NODOCS -- uvm_regex_cache
//
//------------------------------------------------------------------------------
// Extends a uvm_lru_cache to add C-side memory management during eviction.  
//------------------------------------------------------------------------------
//
class uvm_regex_cache extends uvm_lru_cache#(string, chandle);

  `uvm_type_name_decl("uvm_regex_cache")

  // Constructor is protected (singleton)
  protected function new(string name="unnamed-uvm_regex_cache");
    super.new(name);
  endfunction : new

  // Singleton accessor
  static function uvm_regex_cache get_inst();
    static uvm_regex_cache m_inst;
    if (m_inst == null)
      m_inst = new("uvm_regex_cache");
    return m_inst;
  endfunction : get_inst

  // Clear memory after eviction
  virtual function optional_data evict(KEY_T key);
    chandle tmp[$];
    tmp = super.evict(key);
    if (tmp.size() && tmp[0] != null) begin
      uvm_re_free(tmp[0]);
    end
    return tmp;
  endfunction : evict

endclass : uvm_regex_cache
  
`endif //  `ifndef UVM_REGEX_CACHE_SVH

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (conditional_compilation_directive
    (ifdef_condition
      (simple_identifier)))
  (text_macro_definition
    (text_macro_name
      (simple_identifier)))
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (class_declaration
    name: (simple_identifier)
    (class_type
      (simple_identifier)
      (parameter_value_assignment
        (list_of_parameter_value_assignments
          (ordered_parameter_assignment
            (param_expression
              (data_type)))
          (ordered_parameter_assignment
            (param_expression
              (data_type))))))
    (class_item
      (text_macro_usage
        (simple_identifier)
        (list_of_actual_arguments
          (actual_argument
            (param_expression
              (mintypmax_expression
                (expression
                  (primary
                    (primary_literal
                      (string_literal
                        (quoted_string)))))))))))
    (comment)
    (class_item
      (class_method
        (method_qualifier
          (class_item_qualifier))
        (class_constructor_declaration
          (class_constructor_arg_list
            (class_constructor_arg
              (tf_port_item
                (data_type_or_implicit
                  (data_type))
                name: (simple_identifier)
                (expression
                  (primary
                    (primary_literal
                      (string_literal
                        (quoted_string))))))))
          (list_of_arguments
            (expression
              (primary
                (hierarchical_identifier
                  (simple_identifier))))))))
    (comment)
    (class_item
      (class_method
        (method_qualifier
          (class_item_qualifier))
        (function_declaration
          (function_body_declaration
            (data_type_or_void
              (data_type
                (simple_identifier)))
            name: (simple_identifier)
            (block_item_declaration
              (data_declaration
                (lifetime)
                (data_type_or_implicit
                  (data_type
                    (simple_identifier)))
                (list_of_variable_decl_assignments
                  (variable_decl_assignment
                    name: (simple_identifier)))))
            (function_statement_or_null
              (function_statement
                (statement
                  (statement_item
                    (conditional_statement
                      (cond_predicate
                        (expression
                          left: (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))
                          right: (expression
                            (primary))))
                      (statement_or_null
                        (statement
                          (statement_item
                            (blocking_assignment
                              (hierarchical_identifier
                                (simple_identifier))
                              (class_new
                                (list_of_arguments
                                  (expression
                                    (primary
                                      (primary_literal
                                        (string_literal
                                          (quoted_string))))))))))))))))
            (function_statement_or_null
              (function_statement
                (statement
                  (statement_item
                    (jump_statement
                      (expression
                        (primary
                          (hierarchical_identifier
                            (simple_identifier)))))))))
            (simple_identifier)))))
    (comment)
    (class_item
      (class_method
        (method_qualifier)
        (function_declaration
          (function_body_declaration
            (data_type_or_void
              (data_type
                (simple_identifier)))
            name: (simple_identifier)
            (tf_port_list
              (tf_port_item
                (data_type_or_implicit
                  (data_type
                    (simple_identifier)))
                name: (simple_identifier)))
            (block_item_declaration
              (data_declaration
                (data_type_or_implicit
                  (data_type))
                (list_of_variable_decl_assignments
                  (variable_decl_assignment
                    name: (simple_identifier)
                    (queue_dimension)))))
            (function_statement_or_null
              (function_statement
                (statement
                  (statement_item
                    (blocking_assignment
                      (operator_assignment
                        (variable_lvalue
                          (hierarchical_identifier
                            (simple_identifier)))
                        (assignment_operator)
                        (expression
                          (primary
                            (function_subroutine_call
                              (subroutine_call
                                (method_call
                                  (implicit_class_handle)
                                  (method_call_body
                                    name: (simple_identifier)
                                    arguments: (list_of_arguments
                                      (expression
                                        (primary
                                          (hierarchical_identifier
                                            (simple_identifier)))))))))))))))))
            (function_statement_or_null
              (function_statement
                (statement
                  (statement_item
                    (conditional_statement
                      (cond_predicate
                        (expression
                          left: (expression
                            (primary
                              (function_subroutine_call
                                (subroutine_call
                                  (method_call
                                    (primary
                                      (hierarchical_identifier
                                        (simple_identifier)))
                                    (method_call_body
                                      (array_or_queue_method_call
                                        (array_or_queue_method_name))))))))
                          right: (expression
                            left: (expression
                              (primary
                                (hierarchical_identifier
                                  (simple_identifier))
                                (select
                                  (bit_select
                                    (expression
                                      (primary
                                        (primary_literal
                                          (integral_number
                                            (decimal_number
                                              (unsigned_number))))))))))
                            right: (expression
                              (primary)))))
                      (statement_or_null
                        (statement
                          (statement_item
                            (seq_block
                              (statement_or_null
                                (statement
                                  (statement_item
                                    (subroutine_call_statement
                                      (subroutine_call
                                        (tf_call
                                          (hierarchical_identifier
                                            (simple_identifier))
                                          (list_of_arguments
                                            (expression
                                              (primary
                                                (hierarchical_identifier
                                                  (simple_identifier))
                                                (select
                                                  (bit_select
                                                    (expression
                                                      (primary
                                                        (primary_literal
                                                          (integral_number
                                                            (decimal_number
                                                              (unsigned_number))))))))))))))))))))))))))
            (function_statement_or_null
              (function_statement
                (statement
                  (statement_item
                    (jump_statement
                      (expression
                        (primary
                          (hierarchical_identifier
                            (simple_identifier)))))))))
            (simple_identifier)))))
    (simple_identifier))
  (conditional_compilation_directive)
  (comment))
