============================================
core/checker/declaration_0
============================================

// Simple checker containing concurrent assertions
checker my_check1 (logic test_sig, event clock);
    default clocking @clock; endclocking
    property p(logic sig);
        // ...
        a |-> b;
    endproperty
    a1: assert property (p (test_sig));
    c1: cover property (!test_sig ##1 test_sig);
endchecker : my_check1

----

(source_file
  (comment)
  (checker_declaration
    name: (simple_identifier)
    (checker_port_list
      (checker_port_item
        (property_formal_type
          (sequence_formal_type
            (data_type_or_implicit
              (data_type
                (integer_vector_type)))))
        (simple_identifier))
      (checker_port_item
        (property_formal_type
          (sequence_formal_type
            (data_type_or_implicit
              (data_type))))
        (simple_identifier)))
    (checker_item
      (clocking_declaration
        (clocking_event
          (simple_identifier))))
    (checker_item
      (property_declaration
        name: (simple_identifier)
        (property_port_list
          (property_port_item
            (property_formal_type
              (sequence_formal_type
                (data_type_or_implicit
                  (data_type
                    (integer_vector_type)))))
            (simple_identifier)))
        (comment)
        (property_spec
          (property_expr
            (sequence_expr
              (expression_or_dist
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier))))))
            (property_expr
              (sequence_expr
                (expression_or_dist
                  (expression
                    (primary
                      (hierarchical_identifier
                        (simple_identifier)))))))))))
    (checker_item
      (concurrent_assertion_item
        (simple_identifier)
        (assert_property_statement
          (property_spec
            (property_expr
              (sequence_expr
                (sequence_instance
                  (hierarchical_identifier
                    (simple_identifier))
                  (sequence_list_of_arguments
                    (event_expression
                      (expression
                        (primary
                          (hierarchical_identifier
                            (simple_identifier))))))))))
          (action_block
            (statement_or_null)))))
    (checker_item
      (concurrent_assertion_item
        (simple_identifier)
        (cover_property_statement
          (property_spec
            (property_expr
              (sequence_expr
                (sequence_expr
                  (expression_or_dist
                    (expression
                      operator: (unary_operator)
                      argument: (primary
                        (hierarchical_identifier
                          (simple_identifier))))))
                (cycle_delay_range
                  (constant_primary
                    (primary_literal
                      (integral_number
                        (decimal_number
                          (unsigned_number))))))
                (sequence_expr
                  (expression_or_dist
                    (expression
                      (primary
                        (hierarchical_identifier
                          (simple_identifier)))))))))
          (statement_or_null))))
    (simple_identifier)))
