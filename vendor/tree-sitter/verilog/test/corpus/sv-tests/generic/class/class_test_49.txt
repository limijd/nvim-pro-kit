============================================
sv-tests/generic/class/class_test_49
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: class_test_49
:description: Test
:tags: 6.15 8.3
*/

package glb;
  localparam int arr[3] = '{1,2,3};
endpackage

function int f(int a);
  return a;
endfunction

class params_as_class_item;
  parameter N = 2;
  parameter reg P = '1;
  localparam M = f(glb::arr[N]) + 1;
endclass

module test;
endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (package_declaration
    name: (simple_identifier)
    (package_item
      (local_parameter_declaration
        (data_type_or_implicit
          (data_type
            (integer_atom_type)))
        (list_of_param_assignments
          (param_assignment
            (simple_identifier)
            (unpacked_dimension
              (constant_expression
                (constant_primary
                  (primary_literal
                    (integral_number
                      (decimal_number
                        (unsigned_number)))))))
            (constant_param_expression
              (constant_mintypmax_expression
                (constant_expression
                  (constant_primary
                    (assignment_pattern_expression
                      (assignment_pattern
                        (expression
                          (primary
                            (primary_literal
                              (integral_number
                                (decimal_number
                                  (unsigned_number))))))
                        (expression
                          (primary
                            (primary_literal
                              (integral_number
                                (decimal_number
                                  (unsigned_number))))))
                        (expression
                          (primary
                            (primary_literal
                              (integral_number
                                (decimal_number
                                  (unsigned_number)))))))))))))))))
  (function_declaration
    (function_body_declaration
      (data_type_or_void
        (data_type
          (integer_atom_type)))
      name: (simple_identifier)
      (tf_port_list
        (tf_port_item
          (data_type_or_implicit
            (data_type
              (integer_atom_type)))
          name: (simple_identifier)))
      (function_statement_or_null
        (function_statement
          (statement
            (statement_item
              (jump_statement
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier)))))))))))
  (class_declaration
    name: (simple_identifier)
    (class_item
      (parameter_declaration
        (list_of_param_assignments
          (param_assignment
            (simple_identifier)
            (constant_param_expression
              (constant_mintypmax_expression
                (constant_expression
                  (constant_primary
                    (primary_literal
                      (integral_number
                        (decimal_number
                          (unsigned_number))))))))))))
    (class_item
      (parameter_declaration
        (data_type_or_implicit
          (data_type
            (integer_vector_type)))
        (list_of_param_assignments
          (param_assignment
            (simple_identifier)
            (constant_param_expression
              (constant_mintypmax_expression
                (constant_expression
                  (constant_primary
                    (primary_literal
                      (unbased_unsized_literal))))))))))
    (class_item
      (local_parameter_declaration
        (list_of_param_assignments
          (param_assignment
            (simple_identifier)
            (constant_param_expression
              (constant_mintypmax_expression
                (constant_expression
                  left: (constant_expression
                    (constant_primary
                      (constant_function_call
                        (function_subroutine_call
                          (subroutine_call
                            (tf_call
                              (hierarchical_identifier
                                (simple_identifier))
                              (list_of_arguments
                                (expression
                                  (primary
                                    (package_scope
                                      (simple_identifier))
                                    (hierarchical_identifier
                                      (simple_identifier))
                                    (select
                                      (bit_select
                                        (expression
                                          (primary
                                            (hierarchical_identifier
                                              (simple_identifier)))))))))))))))
                  right: (constant_expression
                    (constant_primary
                      (primary_literal
                        (integral_number
                          (decimal_number
                            (unsigned_number))))))))))))))
  (module_declaration
    (module_ansi_header
      (module_keyword)
      name: (simple_identifier))))
