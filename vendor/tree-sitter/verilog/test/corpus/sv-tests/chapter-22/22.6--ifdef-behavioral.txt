============================================
sv-tests/chapter-22/22.6--ifdef-behavioral
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: 22.6--ifdef-behavioral
:description: Test
:tags: 22.6
:type: preprocessing
*/
module and_op (a, b, c);
	output a;
	input b, c;
	`ifdef behavioral
		wire a = b & c;
	`else
		and a1 (a,b,c);
	`endif
endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (module_declaration
    (module_nonansi_header
      (module_keyword)
      name: (simple_identifier)
      (list_of_ports
        (port
          (simple_identifier))
        (port
          (simple_identifier))
        (port
          (simple_identifier))))
    (module_item
      (port_declaration
        (output_declaration
          (list_of_port_identifiers
            (simple_identifier)))))
    (module_item
      (port_declaration
        (input_declaration
          (list_of_port_identifiers
            (simple_identifier)
            (simple_identifier)))))
    (module_item
      (conditional_compilation_directive
        (ifdef_condition
          (simple_identifier))))
    (module_item
      (net_declaration
        (net_type)
        (list_of_net_decl_assignments
          (net_decl_assignment
            (simple_identifier)
            (expression
              left: (expression
                (primary
                  (hierarchical_identifier
                    (simple_identifier))))
              right: (expression
                (primary
                  (hierarchical_identifier
                    (simple_identifier)))))))))
    (module_item
      (conditional_compilation_directive))
    (module_item
      (gate_instantiation
        (n_input_gatetype)
        (n_input_gate_instance
          (name_of_instance
            instance_name: (simple_identifier))
          (output_terminal
            (net_lvalue
              (simple_identifier)))
          (input_terminal
            (expression
              (primary
                (hierarchical_identifier
                  (simple_identifier)))))
          (input_terminal
            (expression
              (primary
                (hierarchical_identifier
                  (simple_identifier))))))))
    (module_item
      (conditional_compilation_directive))))
