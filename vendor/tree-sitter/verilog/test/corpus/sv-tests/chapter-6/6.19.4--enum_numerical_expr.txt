============================================
sv-tests/chapter-6/6.19.4--enum_numerical_expr
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: enum_numerical_expr
:description: enum numerical expression tests
:tags: 6.19.4
*/
module top();
	typedef enum {a, b, c, d} e;

	initial begin
		integer i;
		e val;
		val = a;
		i = val * 4;
	end
endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (module_declaration
    (module_nonansi_header
      (module_keyword)
      name: (simple_identifier)
      (list_of_ports))
    (module_item
      (data_declaration
        (type_declaration
          (data_type
            (enum_name_declaration
              (simple_identifier))
            (enum_name_declaration
              (simple_identifier))
            (enum_name_declaration
              (simple_identifier))
            (enum_name_declaration
              (simple_identifier)))
          type_name: (simple_identifier))))
    (module_item
      (initial_construct
        (statement_or_null
          (statement
            (statement_item
              (seq_block
                (block_item_declaration
                  (data_declaration
                    (data_type_or_implicit
                      (data_type
                        (integer_atom_type)))
                    (list_of_variable_decl_assignments
                      (variable_decl_assignment
                        name: (simple_identifier)))))
                (block_item_declaration
                  (data_declaration
                    (data_type_or_implicit
                      (data_type
                        (simple_identifier)))
                    (list_of_variable_decl_assignments
                      (variable_decl_assignment
                        name: (simple_identifier)))))
                (statement_or_null
                  (statement
                    (statement_item
                      (blocking_assignment
                        (operator_assignment
                          (variable_lvalue
                            (hierarchical_identifier
                              (simple_identifier)))
                          (assignment_operator)
                          (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier)))))))))
                (statement_or_null
                  (statement
                    (statement_item
                      (blocking_assignment
                        (operator_assignment
                          (variable_lvalue
                            (hierarchical_identifier
                              (simple_identifier)))
                          (assignment_operator)
                          (expression
                            left: (expression
                              (primary
                                (hierarchical_identifier
                                  (simple_identifier))))
                            right: (expression
                              (primary
                                (primary_literal
                                  (integral_number
                                    (decimal_number
                                      (unsigned_number))))))))))))))))))))
