============================================
sv-tests/chapter-6/6.9.2--vector_vectored_inv
:error
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: vector_vectored_inv
:description: vectored vector invalid access tests
:should_fail_because: bit selects are not permitted on vectored vector nets
:tags: 6.9.2
*/
module top();
	logic vectored [15:0] a = 0;

	assign a[1] = 1;
endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (module_declaration
    (module_nonansi_header
      (module_keyword)
      name: (simple_identifier)
      (list_of_ports))
    (module_item
      (data_declaration
        (data_type_or_implicit
          (data_type
            (integer_vector_type)))
        (list_of_variable_decl_assignments
          (variable_decl_assignment
            name: (simple_identifier)
            (unpacked_dimension
              (constant_range
                (constant_expression
                  (constant_primary
                    (primary_literal
                      (integral_number
                        (decimal_number
                          (unsigned_number))))))
                (constant_expression
                  (constant_primary
                    (primary_literal
                      (integral_number
                        (decimal_number
                          (unsigned_number))))))))
            (ERROR
              (simple_identifier))
            (expression
              (primary
                (primary_literal
                  (integral_number
                    (decimal_number
                      (unsigned_number))))))))))
    (module_item
      (continuous_assign
        (list_of_net_assignments
          (net_assignment
            (net_lvalue
              (simple_identifier)
              (constant_select
                (constant_bit_select
                  (constant_expression
                    (constant_primary
                      (primary_literal
                        (integral_number
                          (decimal_number
                            (unsigned_number)))))))))
            (expression
              (primary
                (primary_literal
                  (integral_number
                    (decimal_number
                      (unsigned_number))))))))))))

(ERROR)
