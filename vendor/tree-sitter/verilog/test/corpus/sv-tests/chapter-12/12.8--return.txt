============================================
sv-tests/chapter-12/12.8--return
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: jump_return
:description: A module testing return statement
:tags: 12.8
*/
module jump_tb ();
	function void fun(input int a);
		$display("a");
		if(a == 21)
			return;
		$display(a);
		return;
	endfunction
	initial begin
		for (int i = 0; i < 256; i++)begin
			fun(i);
		end
	end
endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (module_declaration
    (module_nonansi_header
      (module_keyword)
      name: (simple_identifier)
      (list_of_ports))
    (module_item
      (function_declaration
        (function_body_declaration
          (data_type_or_void)
          name: (simple_identifier)
          (tf_port_list
            (tf_port_item
              (tf_port_direction
                (port_direction))
              (data_type_or_implicit
                (data_type
                  (integer_atom_type)))
              name: (simple_identifier)))
          (function_statement_or_null
            (function_statement
              (statement
                (statement_item
                  (subroutine_call_statement
                    (subroutine_call
                      (system_tf_call
                        (system_tf_identifier)
                        (list_of_arguments
                          (expression
                            (primary
                              (primary_literal
                                (string_literal
                                  (quoted_string)))))))))))))
          (function_statement_or_null
            (function_statement
              (statement
                (statement_item
                  (conditional_statement
                    (cond_predicate
                      (expression
                        left: (expression
                          (primary
                            (hierarchical_identifier
                              (simple_identifier))))
                        right: (expression
                          (primary
                            (primary_literal
                              (integral_number
                                (decimal_number
                                  (unsigned_number))))))))
                    (statement_or_null
                      (statement
                        (statement_item
                          (jump_statement)))))))))
          (function_statement_or_null
            (function_statement
              (statement
                (statement_item
                  (subroutine_call_statement
                    (subroutine_call
                      (system_tf_call
                        (system_tf_identifier)
                        (list_of_arguments
                          (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))))))))))
          (function_statement_or_null
            (function_statement
              (statement
                (statement_item
                  (jump_statement))))))))
    (module_item
      (initial_construct
        (statement_or_null
          (statement
            (statement_item
              (seq_block
                (statement_or_null
                  (statement
                    (statement_item
                      (loop_statement
                        (for_initialization
                          (for_variable_declaration
                            (data_type
                              (integer_atom_type))
                            (simple_identifier)
                            (expression
                              (primary
                                (primary_literal
                                  (integral_number
                                    (decimal_number
                                      (unsigned_number))))))))
                        (expression
                          left: (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))
                          right: (expression
                            (primary
                              (primary_literal
                                (integral_number
                                  (decimal_number
                                    (unsigned_number)))))))
                        (for_step
                          (inc_or_dec_expression
                            (variable_lvalue
                              (hierarchical_identifier
                                (simple_identifier)))
                            (inc_or_dec_operator)))
                        (statement_or_null
                          (statement
                            (statement_item
                              (seq_block
                                (statement_or_null
                                  (statement
                                    (statement_item
                                      (subroutine_call_statement
                                        (subroutine_call
                                          (tf_call
                                            (hierarchical_identifier
                                              (simple_identifier))
                                            (list_of_arguments
                                              (expression
                                                (primary
                                                  (hierarchical_identifier
                                                    (simple_identifier)))))))))))))))))))))))))))
