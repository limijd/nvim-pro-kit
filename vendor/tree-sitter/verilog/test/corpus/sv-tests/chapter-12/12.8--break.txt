============================================
sv-tests/chapter-12/12.8--break
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: jump_break
:description: A module testing break statement
:tags: 12.8
:type: simulation elaboration parsing
*/
module jump_tb ();
	initial begin
		int i;
		for (i = 0; i < 256; i++)begin
			if(i > 100)
				break;
		end
		$display(":assert:(%d == 101)", i);
	end
endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (module_declaration
    (module_nonansi_header
      (module_keyword)
      name: (simple_identifier)
      (list_of_ports))
    (module_item
      (initial_construct
        (statement_or_null
          (statement
            (statement_item
              (seq_block
                (block_item_declaration
                  (data_declaration
                    (data_type_or_implicit
                      (data_type
                        (integer_atom_type)))
                    (list_of_variable_decl_assignments
                      (variable_decl_assignment
                        name: (simple_identifier)))))
                (statement_or_null
                  (statement
                    (statement_item
                      (loop_statement
                        (for_initialization
                          (list_of_variable_assignments
                            (variable_assignment
                              (variable_lvalue
                                (hierarchical_identifier
                                  (simple_identifier)))
                              (expression
                                (primary
                                  (primary_literal
                                    (integral_number
                                      (decimal_number
                                        (unsigned_number)))))))))
                        (expression
                          left: (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))
                          right: (expression
                            (primary
                              (primary_literal
                                (integral_number
                                  (decimal_number
                                    (unsigned_number)))))))
                        (for_step
                          (inc_or_dec_expression
                            (variable_lvalue
                              (hierarchical_identifier
                                (simple_identifier)))
                            (inc_or_dec_operator)))
                        (statement_or_null
                          (statement
                            (statement_item
                              (seq_block
                                (statement_or_null
                                  (statement
                                    (statement_item
                                      (conditional_statement
                                        (cond_predicate
                                          (expression
                                            left: (expression
                                              (primary
                                                (hierarchical_identifier
                                                  (simple_identifier))))
                                            right: (expression
                                              (primary
                                                (primary_literal
                                                  (integral_number
                                                    (decimal_number
                                                      (unsigned_number))))))))
                                        (statement_or_null
                                          (statement
                                            (statement_item
                                              (jump_statement))))))))))))))))
                (statement_or_null
                  (statement
                    (statement_item
                      (subroutine_call_statement
                        (subroutine_call
                          (system_tf_call
                            (system_tf_identifier)
                            (list_of_arguments
                              (expression
                                (primary
                                  (primary_literal
                                    (string_literal
                                      (quoted_string)))))
                              (expression
                                (primary
                                  (hierarchical_identifier
                                    (simple_identifier)))))))))))))))))))
