============================================
sv-tests/chapter-13/13.4.1--function-void-return
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: function_void_return
:description: void function return value test
:should_fail_because: void function returns value
:tags: 13.4.1
:type: simulation elaboration
*/
module top();

function void add(int a, int b);
	$display("%d+%d=", a, b);
	return a + b;
endfunction

initial
	$display("%d", add(45, 90));

endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (module_declaration
    (module_nonansi_header
      (module_keyword)
      name: (simple_identifier)
      (list_of_ports))
    (module_item
      (function_declaration
        (function_body_declaration
          (data_type_or_void)
          name: (simple_identifier)
          (tf_port_list
            (tf_port_item
              (data_type_or_implicit
                (data_type
                  (integer_atom_type)))
              name: (simple_identifier))
            (tf_port_item
              (data_type_or_implicit
                (data_type
                  (integer_atom_type)))
              name: (simple_identifier)))
          (function_statement_or_null
            (function_statement
              (statement
                (statement_item
                  (subroutine_call_statement
                    (subroutine_call
                      (system_tf_call
                        (system_tf_identifier)
                        (list_of_arguments
                          (expression
                            (primary
                              (primary_literal
                                (string_literal
                                  (quoted_string)))))
                          (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))
                          (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))))))))))
          (function_statement_or_null
            (function_statement
              (statement
                (statement_item
                  (jump_statement
                    (expression
                      left: (expression
                        (primary
                          (hierarchical_identifier
                            (simple_identifier))))
                      right: (expression
                        (primary
                          (hierarchical_identifier
                            (simple_identifier)))))))))))))
    (module_item
      (initial_construct
        (statement_or_null
          (statement
            (statement_item
              (subroutine_call_statement
                (subroutine_call
                  (system_tf_call
                    (system_tf_identifier)
                    (list_of_arguments
                      (expression
                        (primary
                          (primary_literal
                            (string_literal
                              (quoted_string)))))
                      (expression
                        (primary
                          (function_subroutine_call
                            (subroutine_call
                              (tf_call
                                (hierarchical_identifier
                                  (simple_identifier))
                                (list_of_arguments
                                  (expression
                                    (primary
                                      (primary_literal
                                        (integral_number
                                          (decimal_number
                                            (unsigned_number))))))
                                  (expression
                                    (primary
                                      (primary_literal
                                        (integral_number
                                          (decimal_number
                                            (unsigned_number)))))))))))))))))))))))
