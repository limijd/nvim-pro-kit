============================================
sv-tests/chapter-13/13.3.1--task-automatic
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: task_automatic
:description: automatic task test
:tags: 13.3.1
:type: simulation elaboration parsing
*/
module top();

task automatic mytask;
	int a = 0;
	a++;
	$display(":assert:(%d == 1)", a);
endtask

initial begin
   mytask;
   mytask;
   mytask;
   mytask;
end

endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (module_declaration
    (module_nonansi_header
      (module_keyword)
      name: (simple_identifier)
      (list_of_ports))
    (module_item
      (task_declaration
        (lifetime)
        (task_body_declaration
          name: (simple_identifier)
          (tf_item_declaration
            (block_item_declaration
              (data_declaration
                (data_type_or_implicit
                  (data_type
                    (integer_atom_type)))
                (list_of_variable_decl_assignments
                  (variable_decl_assignment
                    name: (simple_identifier)
                    (expression
                      (primary
                        (primary_literal
                          (integral_number
                            (decimal_number
                              (unsigned_number)))))))))))
          (statement_or_null
            (statement
              (statement_item
                (blocking_assignment
                  (inc_or_dec_expression
                    (variable_lvalue
                      (hierarchical_identifier
                        (simple_identifier)))
                    (inc_or_dec_operator))))))
          (statement_or_null
            (statement
              (statement_item
                (subroutine_call_statement
                  (subroutine_call
                    (system_tf_call
                      (system_tf_identifier)
                      (list_of_arguments
                        (expression
                          (primary
                            (primary_literal
                              (string_literal
                                (quoted_string)))))
                        (expression
                          (primary
                            (hierarchical_identifier
                              (simple_identifier))))))))))))))
    (module_item
      (initial_construct
        (statement_or_null
          (statement
            (statement_item
              (seq_block
                (statement_or_null
                  (statement
                    (statement_item
                      (subroutine_call_statement
                        (subroutine_call
                          (tf_call
                            (hierarchical_identifier
                              (simple_identifier))))))))
                (statement_or_null
                  (statement
                    (statement_item
                      (subroutine_call_statement
                        (subroutine_call
                          (tf_call
                            (hierarchical_identifier
                              (simple_identifier))))))))
                (statement_or_null
                  (statement
                    (statement_item
                      (subroutine_call_statement
                        (subroutine_call
                          (tf_call
                            (hierarchical_identifier
                              (simple_identifier))))))))
                (statement_or_null
                  (statement
                    (statement_item
                      (subroutine_call_statement
                        (subroutine_call
                          (tf_call
                            (hierarchical_identifier
                              (simple_identifier))))))))))))))))
