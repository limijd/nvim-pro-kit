============================================
sv-tests/chapter-18/18.5.8.1--foreach-iterative-constraints_0
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: foreach_iterative_constraints_0
:description: foreach iterative constraints test
:tags: 18.5.8.1
:unsynthesizable: 1
*/

class a;
    rand int B[5];
    constraint c { foreach ( B [ i ] ) B[i] == 5; }
endclass

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (class_declaration
    name: (simple_identifier)
    (class_item
      (class_property
        (random_qualifier)
        (data_declaration
          (data_type_or_implicit
            (data_type
              (integer_atom_type)))
          (list_of_variable_decl_assignments
            (variable_decl_assignment
              name: (simple_identifier)
              (unpacked_dimension
                (constant_expression
                  (constant_primary
                    (primary_literal
                      (integral_number
                        (decimal_number
                          (unsigned_number))))))))))))
    (class_item
      (constraint_declaration
        (simple_identifier)
        (constraint_block
          (constraint_block_item
            (constraint_expression
              (hierarchical_identifier
                (simple_identifier))
              (loop_variables
                (simple_identifier))
              (constraint_set
                (constraint_expression
                  (expression_or_dist
                    (expression
                      left: (expression
                        (primary
                          (hierarchical_identifier
                            (simple_identifier))
                          (select
                            (bit_select
                              (expression
                                (primary
                                  (hierarchical_identifier
                                    (simple_identifier))))))))
                      right: (expression
                        (primary
                          (primary_literal
                            (integral_number
                              (decimal_number
                                (unsigned_number)))))))))))))))))
