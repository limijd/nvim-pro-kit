============================================
sv-tests/chapter-18/18.5.14.1--soft-constraint-priorities_2
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: soft_constraint_priorities_2
:description: soft constraint priorities test
:tags: 18.5.14.1
*/


class a1;
    rand int b;

    constraint c1 {
        soft b > 4;
        soft b < 12; }
endclass

class a2 extends a1;
    constraint c2 { soft b == 20; }
    constraint c3;
endclass

constraint a2::c3 { soft b > 100; };

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (class_declaration
    name: (simple_identifier)
    (class_item
      (class_property
        (random_qualifier)
        (data_declaration
          (data_type_or_implicit
            (data_type
              (integer_atom_type)))
          (list_of_variable_decl_assignments
            (variable_decl_assignment
              name: (simple_identifier))))))
    (class_item
      (constraint_declaration
        (simple_identifier)
        (constraint_block
          (constraint_block_item
            (constraint_expression
              (expression_or_dist
                (expression
                  left: (expression
                    (primary
                      (hierarchical_identifier
                        (simple_identifier))))
                  right: (expression
                    (primary
                      (primary_literal
                        (integral_number
                          (decimal_number
                            (unsigned_number))))))))))
          (constraint_block_item
            (constraint_expression
              (expression_or_dist
                (expression
                  left: (expression
                    (primary
                      (hierarchical_identifier
                        (simple_identifier))))
                  right: (expression
                    (primary
                      (primary_literal
                        (integral_number
                          (decimal_number
                            (unsigned_number))))))))))))))
  (class_declaration
    name: (simple_identifier)
    (class_type
      (simple_identifier))
    (class_item
      (constraint_declaration
        (simple_identifier)
        (constraint_block
          (constraint_block_item
            (constraint_expression
              (expression_or_dist
                (expression
                  left: (expression
                    (primary
                      (hierarchical_identifier
                        (simple_identifier))))
                  right: (expression
                    (primary
                      (primary_literal
                        (integral_number
                          (decimal_number
                            (unsigned_number)))))))))))))
    (class_item
      (constraint_prototype
        (simple_identifier))))
  (extern_constraint_declaration
    (class_scope
      (class_type
        (simple_identifier)))
    (simple_identifier)
    (constraint_block
      (constraint_block_item
        (constraint_expression
          (expression_or_dist
            (expression
              left: (expression
                (primary
                  (hierarchical_identifier
                    (simple_identifier))))
              right: (expression
                (primary
                  (primary_literal
                    (integral_number
                      (decimal_number
                        (unsigned_number)))))))))))))
