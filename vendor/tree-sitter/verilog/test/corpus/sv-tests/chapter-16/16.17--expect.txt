============================================
sv-tests/chapter-16/16.17--expect
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: expect_test
:description: expect test
:tags: 16.17
*/

module top();

logic clk;
logic a;
logic b;

initial begin
    expect (@(posedge clk) a ##1 b);
end

endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (module_declaration
    (module_nonansi_header
      (module_keyword)
      name: (simple_identifier)
      (list_of_ports))
    (module_item
      (data_declaration
        (data_type_or_implicit
          (data_type
            (integer_vector_type)))
        (list_of_variable_decl_assignments
          (variable_decl_assignment
            name: (simple_identifier)))))
    (module_item
      (data_declaration
        (data_type_or_implicit
          (data_type
            (integer_vector_type)))
        (list_of_variable_decl_assignments
          (variable_decl_assignment
            name: (simple_identifier)))))
    (module_item
      (data_declaration
        (data_type_or_implicit
          (data_type
            (integer_vector_type)))
        (list_of_variable_decl_assignments
          (variable_decl_assignment
            name: (simple_identifier)))))
    (module_item
      (initial_construct
        (statement_or_null
          (statement
            (statement_item
              (seq_block
                (statement_or_null
                  (statement
                    (statement_item
                      (expect_property_statement
                        (property_spec
                          (property_expr
                            (sequence_expr
                              (sequence_expr
                                (clocking_event
                                  (event_expression
                                    (edge_identifier)
                                    (expression
                                      (primary
                                        (hierarchical_identifier
                                          (simple_identifier))))))
                                (sequence_expr
                                  (expression_or_dist
                                    (expression
                                      (primary
                                        (hierarchical_identifier
                                          (simple_identifier)))))))
                              (cycle_delay_range
                                (constant_primary
                                  (primary_literal
                                    (integral_number
                                      (decimal_number
                                        (unsigned_number))))))
                              (sequence_expr
                                (expression_or_dist
                                  (expression
                                    (primary
                                      (hierarchical_identifier
                                        (simple_identifier)))))))))
                        (action_block
                          (statement_or_null))))))))))))))
