============================================
sv-tests/chapter-16/16.14--assume-property
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: assume_property_test
:description: assume property test
:tags: 16.14
*/
module top();

logic clk;
logic a;

assume property ( @(posedge clk) (a == 1));

endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (module_declaration
    (module_nonansi_header
      (module_keyword)
      name: (simple_identifier)
      (list_of_ports))
    (module_item
      (data_declaration
        (data_type_or_implicit
          (data_type
            (integer_vector_type)))
        (list_of_variable_decl_assignments
          (variable_decl_assignment
            name: (simple_identifier)))))
    (module_item
      (data_declaration
        (data_type_or_implicit
          (data_type
            (integer_vector_type)))
        (list_of_variable_decl_assignments
          (variable_decl_assignment
            name: (simple_identifier)))))
    (module_item
      (concurrent_assertion_item
        (assume_property_statement
          (property_spec
            (property_expr
              (sequence_expr
                (clocking_event
                  (event_expression
                    (edge_identifier)
                    (expression
                      (primary
                        (hierarchical_identifier
                          (simple_identifier))))))
                (sequence_expr
                  (expression_or_dist
                    (expression
                      (primary
                        (mintypmax_expression
                          (expression
                            left: (expression
                              (primary
                                (hierarchical_identifier
                                  (simple_identifier))))
                            right: (expression
                              (primary
                                (primary_literal
                                  (integral_number
                                    (decimal_number
                                      (unsigned_number)))))))))))))))
          (action_block
            (statement_or_null)))))))
