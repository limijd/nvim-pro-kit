============================================
sv-tests/chapter-11/11.4.14.1--stream_concat-sim
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: stream_concat_sim
:description: stream concatenation simulation test
:type: simulation elaboration parsing
:tags: 11.4.14.1
*/
module top();

int a = {"A", "B", "C", "D"};
int b = {"E", "F", "G", "H"};
logic [63:0] c;

initial begin
	c = {>> 8 {a, b}};
    $display(":assert: (((%d << 32) + %d) == %d) ", a, b, c);
end

endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (module_declaration
    (module_nonansi_header
      (module_keyword)
      name: (simple_identifier)
      (list_of_ports))
    (module_item
      (data_declaration
        (data_type_or_implicit
          (data_type
            (integer_atom_type)))
        (list_of_variable_decl_assignments
          (variable_decl_assignment
            name: (simple_identifier)
            (expression
              (primary
                (concatenation
                  (expression
                    (primary
                      (primary_literal
                        (string_literal
                          (quoted_string)))))
                  (expression
                    (primary
                      (primary_literal
                        (string_literal
                          (quoted_string)))))
                  (expression
                    (primary
                      (primary_literal
                        (string_literal
                          (quoted_string)))))
                  (expression
                    (primary
                      (primary_literal
                        (string_literal
                          (quoted_string))))))))))))
    (module_item
      (data_declaration
        (data_type_or_implicit
          (data_type
            (integer_atom_type)))
        (list_of_variable_decl_assignments
          (variable_decl_assignment
            name: (simple_identifier)
            (expression
              (primary
                (concatenation
                  (expression
                    (primary
                      (primary_literal
                        (string_literal
                          (quoted_string)))))
                  (expression
                    (primary
                      (primary_literal
                        (string_literal
                          (quoted_string)))))
                  (expression
                    (primary
                      (primary_literal
                        (string_literal
                          (quoted_string)))))
                  (expression
                    (primary
                      (primary_literal
                        (string_literal
                          (quoted_string))))))))))))
    (module_item
      (data_declaration
        (data_type_or_implicit
          (data_type
            (integer_vector_type)
            (packed_dimension
              (constant_range
                (constant_expression
                  (constant_primary
                    (primary_literal
                      (integral_number
                        (decimal_number
                          (unsigned_number))))))
                (constant_expression
                  (constant_primary
                    (primary_literal
                      (integral_number
                        (decimal_number
                          (unsigned_number))))))))))
        (list_of_variable_decl_assignments
          (variable_decl_assignment
            name: (simple_identifier)))))
    (module_item
      (initial_construct
        (statement_or_null
          (statement
            (statement_item
              (seq_block
                (statement_or_null
                  (statement
                    (statement_item
                      (blocking_assignment
                        (operator_assignment
                          (variable_lvalue
                            (hierarchical_identifier
                              (simple_identifier)))
                          (assignment_operator)
                          (expression
                            (primary
                              (streaming_concatenation
                                (stream_operator)
                                (slice_size
                                  (constant_expression
                                    (constant_primary
                                      (primary_literal
                                        (integral_number
                                          (decimal_number
                                            (unsigned_number)))))))
                                (stream_concatenation
                                  (stream_expression
                                    (expression
                                      (primary
                                        (hierarchical_identifier
                                          (simple_identifier)))))
                                  (stream_expression
                                    (expression
                                      (primary
                                        (hierarchical_identifier
                                          (simple_identifier))))))))))))))
                (statement_or_null
                  (statement
                    (statement_item
                      (subroutine_call_statement
                        (subroutine_call
                          (system_tf_call
                            (system_tf_identifier)
                            (list_of_arguments
                              (expression
                                (primary
                                  (primary_literal
                                    (string_literal
                                      (quoted_string)))))
                              (expression
                                (primary
                                  (hierarchical_identifier
                                    (simple_identifier))))
                              (expression
                                (primary
                                  (hierarchical_identifier
                                    (simple_identifier))))
                              (expression
                                (primary
                                  (hierarchical_identifier
                                    (simple_identifier)))))))))))))))))))
